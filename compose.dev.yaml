services:
  next-app:
    container_name: nextjs-app-route
    build:
      context: ./next-app
      dockerfile: dev.Dockerfile
    depends_on:
      - next-database
      - next-mariadb
    # Set environment variables directly in the compose file
    environment:
      ENV_VARIABLE: ${ENV_VARIABLE}
      NEXT_PUBLIC_ENV_VARIABLE: ${NEXT_PUBLIC_ENV_VARIABLE}
      # NEXT_WEBPACK_USEPOLLING: 1
      # Set environment variables based on the .env file
    env_file:
      - .env
    volumes:
      - ./next-app/src:/app/src
      - ./next-app/public:/app/public
      - ./next-app/package.json:/app/package.json
      - ./next-app/package-lock.json:/app/package-lock.json
      - ./next-app/next.config.ts:/app/next.config.ts
      - ./next-app/tsconfig.json:/app/tsconfig.json
      - ./next-app/postcss.config.mjs:/app/postcss.config.mjs
      - ./next-app/tailwind.config.ts:/app/tailwind.config.ts
      - ./next-app/.env.development.local:/app/.env.development.local
    restart: unless-stopped
    ports:
      - 3000:3000
    networks:
      - my_network2

  # Add more containers below (nginx, postgres, etc.)
  next-database:
    image: mongo:latest
    environment:
      - MONGO_INITDB_DATABASE=test
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
    command: --port 27018 --auth
    #--config /etc/mongo/mongod.conf
    volumes:
      - database:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: unless-stopped
    networks:
      - my_network2
    ports:
      - 27018:27018

  next-mariadb:
    image: mariadb:latest
    container_name: mariadb-compose
    volumes:
      - mariadb:/var/lib/mysql
      - ./init-mariadb.sql:/docker-entrypoint-initdb.d/initdb.sql
    environment:
      - MARIADB_ROOT_PASSWORD=rootPassword
      - MARIADB_DATABASE=test-database
      - MARIADB_USER=test-user
      - MARIADB_PASSWORD=test-password
    restart: unless-stopped
    ports:
      - "3306:3306"
    networks:
      - my_network2
# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  my_network2:
    external: true

volumes:
  database:
  mariadb:
